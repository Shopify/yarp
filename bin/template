#!/usr/bin/env ruby

require "erb"
require "fileutils"
require "yaml"

# This represents a parameter to a node that is itself a node. We pass them as
# references and store them as references.
class NodeParam < Struct.new(:name)
  def decl = "struct yp_node *#{name}"
  def param = "yp_node_t *#{name}"
  def assign = name
  def rbs_class = "Node"
  def child_nodes = name

  def start_location(params) = "#{name}->location.start"
  def end_location(params) = "#{name}->location.end"
  def location(params) = "#{name}->location"
end

# This represents a parameter to a node that is itself a node and can be
# optionally null. We pass them as references and store them as references.
class OptionalNodeParam < Struct.new(:name, :fallback)
  def decl = "struct yp_node *#{name}"
  def param = "yp_node_t *#{name}"
  def assign = name
  def rbs_class = "Node?"
  def child_nodes = name

  def fallback_param(params) = params.find { |param| param.name == fallback }
  def start_location(params) = "(#{name} == NULL ? #{fallback_param(params).start_location(params)} : #{name}->location.start)"
  def end_location(params) = "(#{name} == NULL ? #{fallback_param(params).end_location(params)} : #{name}->location.end)"
  def location(params) = "(#{name} == NULL ? #{fallback_param(params).location(params)} : #{name}->location)"
end

# This represents a parameter to a node that is a list of nodes. We pass them as
# references and store them as references.
class NodeListParam < Struct.new(:name)
  def decl = "struct yp_node_list *#{name}"
  def param = nil
  def assign = "yp_node_list_create(parser)"
  def rbs_class = "Array[Node]"
  def child_nodes = "*#{name}"

  def start_location(params) = "0"
  def end_location(params) = "0"
  def location(params) = "{ .start = #{start_location(params)}, .end = #{end_location(params)} }"
end

# This represents a parameter to a node that is a token. We pass them as
# references and store them by copying.
class TokenParam < Struct.new(:name)
  def decl = "yp_token_t #{name}"
  def param = "yp_token_t *#{name}"
  def assign = "*#{name}"
  def rbs_class = "Token"
  def child_nodes = nil

  def start_location(params) = "#{name}->start - parser->input.start"
  def end_location(params) = "#{name}->end - parser->input.start"
  def location(params) = "{ .start = #{start_location(params)}, .end = #{end_location(params)} }"
end

# This represents a parameter to a node that is a list of tokens.
class TokenListParam < Struct.new(:name)
  def decl = "yp_token_list_t *#{name}"
  def param = nil
  def assign = "yp_token_list_create()"
  def rbs_class = "Array[Token]"
  def child_nodes = "*#{name}"

  def start_location(params) = "0"
  def end_location(params) = "0"
  def location(params) = "{ .start = #{start_location(params)}, .end = #{end_location(params)} }"
end

# This represents a parameter to a node that is a string.
class StringParam < Struct.new(:name)
  def decl = "yp_string_t #{name}"
  def param = "yp_string_t *#{name}"
  def assign = "*#{name}"
  def rbs_class = ""
  def child_nodes = nil
end

# This class represents a node in the tree, configured by the config.yml file in
# YAML format. It contains information about the name of the node, the various
# child nodes it contains, and how to obtain the location of the node in the
# source.
class NodeType
  attr_reader :name, :type, :human, :params, :location, :comment

  def initialize(config)
    @name = config.fetch("name")

    type = @name.gsub(/(.)([A-Z])/, "\\1_\\2")
    @type = "YP_NODE_#{type.upcase}"
    @human = type.downcase

    @params =
      config.fetch("child_nodes").map do |param|
        type, name = param.split(" ")

        case type
        when "node"
          NodeParam.new(name)
        when /\Anode\?(.+)/
          OptionalNodeParam.new(name, $1)
        when "node[]"
          NodeListParam.new(name)
        when "string"
          StringParam.new(name)
        when "token"
          TokenParam.new(name)
        when "token[]"
          TokenListParam.new(name)
        else
          raise
        end
      end

    @location =
      config.fetch("location").then do |location|
        if location.include?("->")
          from, to = location.split("->").map { |name| params.find { |param| param.name == name } }
          "{ .start = #{from.start_location(params)}, .end = #{to.end_location(params)} }"
        else
          params.detect { |param| param.name == location }.location(params)
        end
      end

    @comment = config["comment"]
  end
end

# This represents a token in the lexer. They are configured through the
# config.yml file for now, but this will probably change as we transition to
# storing semantic strings instead of the lexer tokens.
class Token
  attr_reader :name, :value, :comment

  def initialize(config)
    @name = config.fetch("name")
    @value = config["value"]
    @comment = config.fetch("comment")
  end

  def declaration
    output = []
    output << "YP_TOKEN_#{name}"
    output << " = #{value}" if value
    output << ", // #{comment}"
    output.join(" ")
  end
end

# This templates out a file using ERB with the given locals. The locals are
# derived from the config.yml file.
def template(name, locals)
  template = File.expand_path("../bin/templates/#{name}.erb", __dir__)
  write_to = File.expand_path("../#{name}", __dir__)

  contents = ERB.new(File.read(template), trim_mode: "-").result_with_hash(locals)
  FileUtils.mkdir_p(File.dirname(write_to))
  File.write(write_to, contents)

  if [".c", ".h"].include?(File.extname(write_to))
    system("clang-format -i #{write_to}")
  end
end

config = YAML.load_file(File.expand_path("../config.yml", __dir__))
locals = {
  nodes: config.fetch("nodes").map { |node| NodeType.new(node) }.sort_by(&:name),
  tokens: config.fetch("tokens").map { |token| Token.new(token) }
}

template("ext/yarp/node.c", locals)
template("lib/yarp/node.rb", locals)
template("lib/yarp/serialize.rb", locals)
template("src/ast.h", locals)
template("src/node.c", locals)
template("src/node.h", locals)
template("src/serialize.c", locals)
template("src/token_type.c", locals)
