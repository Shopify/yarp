/******************************************************************************/
/* BEGIN TEMPLATE                                                             */
/******************************************************************************/

static VALUE
node_new(yp_parser_t *parser, yp_node_t *node) {
  switch (node->type) {
    <%- nodes.each do |node| -%>
    case <%= node.type %>: {
      VALUE argv[<%= node.params.length + 1 %>];
      <%- node.params.each_with_index do |param, index| -%>

      // <%= param.name %>
      <%- case param -%>
      <%- when NodeParam -%>
      argv[<%= index %>] = node_new(parser, node->as.<%= node.human %>.<%= param.name %>);
      <%- when OptionalNodeParam -%>
      argv[<%= index %>] = node->as.<%= node.human %>.<%= param.name %> == NULL ? Qnil : node_new(parser, node->as.<%= node.human %>.<%= param.name %>);
      <%- when NodeListParam -%>
      argv[<%= index %>] = rb_ary_new();
      for (size_t index = 0; index < node->as.<%= node.human %>.<%= param.name %>->size; index++) {
        rb_ary_push(argv[<%= index %>], node_new(parser, node->as.<%= node.human %>.<%= param.name %>->nodes[index]));
      }
      <%- when StringParam -%>
      argv[<%= index %>] = string_new(parser, &node->as.<%= node.human %>.<%= param.name %>);
      <%- else -%>
      <%- raise "Unsupported param type #{param.class}" -%>
      <%- end -%>
      <%- end -%>

      // location
      argv[<%= node.params.length %>] = location_new(&node->location);

      return rb_class_new_instance(<%= node.params.length + 1 %>, argv, rb_const_get_at(rb_cYARP, rb_intern("<%= node.name %>")));
    }
    <%- end -%>
    default:
      rb_raise(rb_eRuntimeError, "unknown node type: %d", node->type);
  }
}

/******************************************************************************/
/* END TEMPLATE                                                               */
/******************************************************************************/
